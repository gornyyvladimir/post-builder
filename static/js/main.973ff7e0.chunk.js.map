{"version":3,"sources":["components/pages/PostEditor/PostEditor.module.css","components/pages/PostEditor/instagram.png","components/organisms/AppBar/index.jsx","components/pages/PostEditor/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","wrapper","flexItem","emojiText","textarea","emojiPicker","hide","__webpack_require__","p","withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","PostEditor","state","text","cursorPosition","showPicker","textareaRef","React","createRef","handleChange","event","_this","setState","emojify","target","value","output","addEmoji","emoji","prevState","textBefore","slice","textAfter","native","handleBlur","selectionStart","handleClick","console","log","current","select","document","execCommand","alert","handleTogglePicker","handleClickAway","this","Fragment","organisms_AppBar","Grid_default","container","item","xs","sm","spacing","textFieldWrapper","TextField_default","id","label","multiline","rows","rowsMax","textField","onChange","onBlur","inputRef","margin","helperText","concat","length","ClickAwayListener_default","onClickAway","dist_es","set","onSelect","style","top","right","zIndex","buttons","Button_default","button","onClick","IconButton_default","aria-label","TagFaces_default","Card_default","card","CardHeader_default","avatar","Avatar_default","action","MoreVert_default","title","subheader","CardMedia_default","media","image","instagramPost","CardContent_default","component","company","inline","lib","svg","styles","CardActions_default","actions","disableActionSpacing","FavoriteOutlined_default","ModeCommentOutlined_default","ShareOutlined_default","Component","theme","justifyContent","unit","paddingLeft","paddingRight","display","alignItems","padding","width","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","backgroundColor","red","fontWeight","marginRight","App","CssBaseline_default","pages_PostEditor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.973ff7e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PostEditor_wrapper__Ay5Bb\",\"flexItem\":\"PostEditor_flexItem__1hYPG\",\"emojiText\":\"PostEditor_emojiText__XZF0y\",\"textarea\":\"PostEditor_textarea__3m4eX\",\"emojiPicker\":\"PostEditor_emojiPicker__126bb\",\"hide\":\"PostEditor_hide__1xGjv\"};","module.exports = __webpack_public_path__ + \"static/media/instagram.339b8c22.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nfunction SimpleAppBar(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Instagram post builder\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nSimpleAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleAppBar);\n","import React, { Component } from 'react';\nimport { Emojione, Twemoji } from 'react-emoji-render';\nimport { emojify } from 'react-emojione';\nimport { Picker } from 'emoji-mart';\nimport classNames from 'classnames';\nimport AppBar from '../../organisms/AppBar';\nimport 'emoji-mart/css/emoji-mart.css';\nimport styles from './PostEditor.module.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport red from '@material-ui/core/colors/red';\nimport FavoriteIcon from '@material-ui/icons/FavoriteOutlined';\nimport ShareIcon from '@material-ui/icons/ShareOutlined';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport instagramPost from './instagram.png';\nimport FaceIcon from '@material-ui/icons/TagFaces';\nimport CommentIcon from '@material-ui/icons/ModeCommentOutlined';\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\n\nconst styles1 = theme => ({\n  root: {\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n  button: {\n    margin: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 4,\n    paddingRight: theme.spacing.unit * 4,\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n  container: {\n    padding: theme.spacing.unit * 2,\n  },\n  textField: {\n    width: '100%',\n  },\n  textFieldWrapper: {\n    position: 'relative',\n  },\n  media: {\n    height: 0,\n    paddingTop: '100%', // 1:1\n  },\n  actions: {\n    display: 'flex',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n  company: {\n    fontWeight: '500',\n    marginRight: '4px',\n  },\n});\n\nclass PostEditor extends Component {\n  state = {\n    text: '',\n    cursorPosition: 0,\n    showPicker: false,\n  };\n\n  textareaRef = React.createRef();\n\n  handleChange = event => {\n    this.setState({ text: emojify(event.target.value, { output: 'unicode' }) });\n  };\n\n  addEmoji = emoji => {\n    this.setState(prevState => {\n      const textBefore = prevState.text.slice(0, prevState.cursorPosition);\n      const textAfter = prevState.text.slice(prevState.cursorPosition);\n      return { text: textBefore + emoji.native + textAfter };\n    });\n  };\n\n  handleBlur = event => {\n    this.setState({ cursorPosition: event.target.selectionStart });\n  };\n\n  handleClick = () => {\n    console.log(this.textareaRef.current);\n    this.textareaRef.current.select();\n    document.execCommand('copy');\n    alert('Copy success');\n  };\n\n  handleTogglePicker = () => {\n    this.setState(prevState => ({ showPicker: !prevState.showPicker }));\n  };\n\n  handleClickAway = () => {\n    this.setState(prevState => ({ showPicker: false }));\n  };\n\n  // This ❤️ sentence includes :+1: a variety of emoji types :)\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <>\n        <header>\n          <AppBar />\n        </header>\n        <main>\n          <Grid className={classes.root} container>\n            <Grid item xs={12} sm={10}>\n              <Grid container spacing={24} className={classes.container}>\n                <Grid item xs={12} sm={8}>\n                  <div className={classes.textFieldWrapper}>\n                    <TextField\n                      id=\"outlined-multiline-flexible\"\n                      label=\"Description editor\"\n                      multiline\n                      rows=\"22\"\n                      rowsMax=\"28\"\n                      className={classes.textField}\n                      value={this.state.text}\n                      onChange={this.handleChange}\n                      onBlur={this.handleBlur}\n                      inputRef={this.textareaRef}\n                      margin=\"none\"\n                      helperText={`${this.state.text.length} characters, max 2000`}\n                      variant=\"outlined\"\n                    />\n                    <ClickAwayListener onClickAway={this.handleClickAway}>\n                      <div>\n                        {this.state.showPicker && (\n                          <Picker\n                            set=\"apple\"\n                            onSelect={this.addEmoji}\n                            style={{ position: 'absolute', top: '0', right: '0', zIndex: '1300' }}\n                          />\n                        )}\n                      </div>\n                    </ClickAwayListener>\n                  </div>\n                  <div className={classes.buttons}>\n                    <Button variant=\"outlined\" color=\"primary\" className={classes.button} onClick={this.handleClick}>\n                      Copy\n                    </Button>\n                    <IconButton color=\"primary\" aria-label=\"Emoji\" onClick={this.handleTogglePicker}>\n                      <FaceIcon />\n                    </IconButton>\n                  </div>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <Card className={classes.card}>\n                    <CardHeader\n                      avatar={\n                        <Avatar aria-label=\"Nautilus logo\" className={classes.avatar}>\n                          N\n                        </Avatar>\n                      }\n                      action={\n                        <IconButton>\n                          <MoreVertIcon />\n                        </IconButton>\n                      }\n                      title=\"nautilustour\"\n                      subheader=\"Kazan, Tatarstan\"\n                    />\n                    <CardMedia className={classes.media} image={instagramPost} title=\"Instagram post\" />\n                    <CardContent>\n                      <Typography component=\"div\">\n                        <Typography className={classes.company} component=\"span\" inline>\n                          nautilustour\n                        </Typography>\n                        <Twemoji svg className={styles.emojiText} text={this.state.text} />\n                      </Typography>\n                    </CardContent>\n                    <CardActions className={classes.actions} disableActionSpacing>\n                      <IconButton aria-label=\"Add to favorites\">\n                        <FavoriteIcon />\n                      </IconButton>\n                      <IconButton aria-label=\"Comment\">\n                        <CommentIcon />\n                      </IconButton>\n                      <IconButton aria-label=\"Share\">\n                        <ShareIcon />\n                      </IconButton>\n                    </CardActions>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </main>\n      </>\n    );\n  }\n}\n\nexport default withStyles(styles1)(PostEditor);\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport PostEditor from './components/pages/PostEditor';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <CssBaseline />\n        <PostEditor />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}